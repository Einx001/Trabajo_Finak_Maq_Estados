//Librerias utilizadas
#include <LiquidCrystal.h>
#include <Keypad.h>
#include <EEPROM.h>
#include "DHTStable.h"
#include "AsyncTaskLib.h"

#define DEBUG(a) Serial.print(millis()); Serial.print(": "); Serial.println(a);

//Definicion de loscomponentes
//Pantalla LCD 16x2
const int rs = 12, en = 11, d4 = 14, d5 = 15, d6 = 16, d7 = 17;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

//Teclado Matricial 4x4
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6};
byte colPins[COLS] = {10, 4, 3, 2};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

//LED RGB
#define LED_GREEN 53
#define LED_RED 51
#define LED_BLUE 49
//int

//Sensor de luz (Fotoresistor)
#define pin_photo A0
int photo_value = 0;
void read_photoresistor(void);

//Sensor de temperatura
#define pin_temp A1
#define beta 4090
#define resistance 10
float temp_value = 0.0;
float temperatura = 0.0;
void read_temperature(void);
int max_temp = 50;
int min_temp = 0;

//Buzzer
#define pin_buzz 4
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
int duraciones[] = { 8, 8, 4, 4 };
int melodia[] = { NOTE_B6, NOTE_C7, NOTE_CS7, NOTE_D7 };

//Definicion de las variables del programa
//Definicion de umbrales configurables para los sensores
byte umbTempHigh = 30;
byte umbTempLow = 18;
int umbLuzHigh = 34;
int umbLuzLow = 34;
byte umbTempAlarm  = 40;

// definicion de umbrales por defecto de los sensores
byte defUmbTempHigh = 30;
byte defUmbTempLow = 18;
int defUmbLuz = 34;
int defUmbLuzLow = 34;
byte defUmbTempAlarma  = 40;

//variables contraseña
char contrasena[4] = {'1', '1', '1', '1'};
int indice = 0;  // necesaria para contar los dijitos de la clave
int cursor = 0;    // posicion inicial de la clave en el LCD
int intentos = 0;   //para contar las veces de clave incorrecta
bool ContrasenaCorrecta = false;

//Variables auxiliares
bool auxSeguridad = true;
bool auxConfiguracion = true;
bool auxMonitoreo = true;

unsigned long tiempo = 0;
byte pos_memoria = 0;

// Definiciones de las tareas asincronas
AsyncTask asyncTaskTemp(2000, true, read_temperature);
AsyncTask asyncTaskPhoto(1000, true, read_photoresistor);

//Estados finitos de la maquina
enum estado{
  estado1Seguridad,// sistema bloqueado
  estado2Configuracion,// estado de configuracion
  estado3Monitoreo,//Donde suceden los hechos
  estado4Alarma// estado de alarma
};
estado currentState;//controlador de estados

enum Input{
  Unknown,
  reset,
  forward,
  Backward
};
Input currentInput;//controlador de entradas

#pragma region metodos_sensores
//procesador de la funcion entregada por el fotoresistor
void read_photoresistor(){
  photo_value = analogRead(pin_photo);
}
//Procesador de la informacion entregada por el sensor de temperatura
void read_temperature(){
  //Extraer temperatura en grados centigrados
  long a = 1023 - analogRead(pin_temp);
  temperatura = beta / (log((1025.0 * 10 / a - 10) / 10) + beta / 298.0) - 273.0;
}

void setup(){
  //Inicializacion de pines
  //LED RGB
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(LED_BLUE, OUTPUT);
  //Buzzer
  pinMode(pin_buzz, OUTPUT);
  Serial.begin(9600);
  //Inicializacion de la pantalla LCD
  lcd.begin(16, 2);
  lcd.clear();
  //Inicializacion de las tareas asincronicas
  asyncTaskTemp.Start();
  asyncTaskPhoto.Start();
  //Inicializacion de la maquina de estados
  currentState =  estado::estado1Seguridad;
  currentInput = Input::Unknown;
}

void loop(){
 char customKey = keypad.getKey();
  if (customKey){
    press_key_static(customKey);
  }
  updateStateMachine();
}

void updateStateMachine(){// se hace la seleccion de funciones a realizar segun el estado actual y la entrada
  switch (currentState){
    case estado::estado1Seguridad:  // actualiza el estado de la maquina partiendo desde el estado 1
        switch (currentInput){
        case Input::Unknown: Seguridad(); break; // con entrada en vacio, la maquina continua en el estado actual y ejecuta sus funciones
        case Input::reset:
            currentState = estado::estado1Seguridad; 
            auxSeguridad = true;
            currentInput = Input::Unknown;
            lcd.clear();
            lcd.setCursor(0, 0);
           break;
        case Input::forward:
            currentState = estado::estado2Configuracion; 
            auxSeguridad  = true;
            currentInput = Input::Unknown;
            lcd.clear();
            lcd.setCursor(0, 0);
          break;
        case Input::Backward:
            currentState = estado::estado1Seguridad; 
            auxSeguridad  = true;
            currentInput = Input::Unknown;
            lcd.clear();
            lcd.setCursor(0, 0);
           break;
        default: break;
      }
      break;
    case estado::estado2Configuracion: // actualiza el estado de la maquina partiendo desde el estado 2
        switch (currentInput){
          case Input::Unknown: funcion_configuracion(); break; // con entrada en vacio, la maquina continua en el estado actual y ejecuta sus funciones
          case Input::reset:
              currentState = estado::estado1Seguridad; 
              auxSeguridad  = true;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::forward:
              currentState = estado::estado3Monitoreo; 
              auxSeguridad  = true;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::Backward:
              currentState = estado::estado2Configuracion; 
              auxSeguridad  = true;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          default: break;
        }
       break;
    case estado::estado3Monitoreo: // actualiza el estado de la maquina partiendo desde el estado 3
     switch (currentInput){
          case Input::Unknown: funcion_monitoreo(); break; // con entrada en vacio, la maquina continua en el estado actual y ejecuta sus funciones
          case Input::reset: //********** RESET
              currentState = estado::estado1Seguridad; 
              auxMonitoreo = true;
              ContrasenaCorrecta = false;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::forward:
              currentState = estado::estado4Alarma; 
              auxMonitoreo = true;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::Backward:
              currentState = estado::estado2Configuracion; 
              auxMonitoreo = true;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          default: break;
        }
      break;
    case estado::estado4Alarma: // actualiza el estado de la maquina partiendo desde el estado 4
     switch (currentInput){
          case Input::Unknown: funcion_alarma(); break; // con entrada en vacio, la maquina continua en el estado actual y ejecuta sus funciones
          case Input::reset:
              currentState = estado::estado1Seguridad;
              ContrasenaCorrecta = false;
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::forward:
              currentState = estado::estado3Monitoreo; 
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          case Input::Backward:
              currentState = estado::estado3Monitoreo; 
              currentInput = Input::Unknown;
              lcd.clear();
              lcd.setCursor(0, 0);
            break;
          default: break;
        }
      break;
    default: break;
  }
}

void press_key_static(char key){ // este metodo me ejecuta la lectura de la entrada desde las teclas 8 (back) y 9 (reset)
  if (key == '7') {
    lcd.clear();
    lcd.setCursor(0, 0);
      lcd.print("BACK");
      Serial.println("BACK");
      delay(500);
        currentInput = Input::Backward;
  } 
  if (key == '9') {
     lcd.clear();
    lcd.setCursor(0, 0);
      lcd.print("RESET");
      Serial.println("RESET");
      delay(500);
       currentInput = Input::reset;
  }
}

void Seguridad() {// funcion para el estado de seguridad
  if (auxSeguridad){
    indice = 0;
    intentos = 0;
    cursor = 0;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Ingrese Clave:");
    lcd.setCursor(0, 1);
    auxSeguridad = false;
  }
  char customKey = keypad.getKey();
  if (customKey){
    lcd.print(customKey);
    cursor++;
    if (customKey == contrasena[indice] && cursor <= 4) {
      indice ++;
      if (indice == 4) {
        lcd.clear();
        lcd.setCursor(0, 0); 
        lcd.print("Clave Correcta!");
        digitalWrite(LED_GREEN, HIGH);
        delay(3000);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Bienvenido al");
        lcd.setCursor(0, 1);
        lcd.print("Sistema!");
        delay(3000);
        digitalWrite(LED_GREEN, LOW);
        ContrasenaCorrecta = true;
        indice = 0;
        intentos = 0;
        cursor = 0;
        lcd.clear();
        lcd.setCursor(0, 0);
        delay(1000);
      }
    } else {
      indice = 0;
    }
    if (cursor >= 4) {
      cursor = 0;
      indice = 0;
      intentos++;
      lcd.setCursor(0, 1);
      lcd.print("Clave Incorrecta");
      digitalWrite(LED_BLUE, HIGH);
      delay(2000);
      digitalWrite(LED_BLUE, LOW);
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Ingrese Clave");
      lcd.setCursor(0, 1);
      //Sistema bloqueado
      if (intentos == 3) {
        intentos = 0;
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("El Sistema se ha");
        lcd.setCursor(0, 1);
        lcd.print("Bloqueado!");
        //led rojo
        digitalWrite(LED_RED, HIGH);
        delay(3000);
        digitalWrite(LED_RED, LOW);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Ingrese la clave");
        lcd.setCursor(0, 1);
      }
    }
  }
  if (ContrasenaCorrecta) {
    currentInput = Input::forward;
    ContrasenaCorrecta = false;
    lcd.clear();
    lcd.setCursor(0, 0);
  }
}

void Configuracion(){
  pos_memoria =0;
}

void funcion_configuracion() {// funcion para el estado de configuracion
  Serial.println(" maquina en estado de configuracion");
  if (estado2Configuracion) {
    Configuracion();
    auxConfiguracion = false;
  }
   mostrar_menu_1();
  char key = keypad.getKey();
  if (key) {
    press_menu(key);
  }
}

void mostrar_menu_1(){
  Serial.println(" maquina en estado conf menu 1");
 lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("1.Umb Temp High");
  lcd.setCursor(0, 1);
  lcd.print("2.Umb Temp Low");
  bool temp_while = true;
  // char key = keypad.getKey();
 while (temp_while) {
    char key = keypad.getKey();
 if (key) {
   if(key == '#'){
    mostrar_menu_2();    //-------- menu derecha
    temp_while = false;
   }
   if(key== '*'){
    mostrar_menu_1();    //-------- menu izquierda
    temp_while = false;
   }
    press_menu(key);
    temp_while = false;
  }
  }
}
void mostrar_menu_2(){
  Serial.println(" maquina en estado conf menu 2");
   lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("3.Umb Temp Alarm");
  lcd.setCursor(0, 1);
  lcd.print("4.Umb ligth");
  bool temp_while = true;
 while (temp_while) {
   char key = keypad.getKey();
 if (key) {
   if(key=='#'){
    mostrar_menu_3();    //-------- menu derecha
    temp_while = false;
   }
   if(key=='*'){
    mostrar_menu_1();    //-------- menu izquierda
    temp_while = false;
   }
    press_menu(key);
    temp_while = false;
  }
  }
}

void mostrar_menu_3(){
    Serial.println(" maquina en estado conf menu 3");
    lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("5.Umb sound");
  lcd.setCursor(0, 1);
  lcd.print("6.Continuar a M");
  bool temp_while = true;
 while (temp_while) {
   char key = keypad.getKey();
 if (key) {
   if(key=='#'){
    mostrar_menu_4();    //-------- menu derecha
    temp_while = false;
   }
   if(key=='*'){
    mostrar_menu_2();    //-------- menu izquierda
    temp_while = false;
   }
    press_menu(key);
    temp_while = false;
  }
  }
}
void mostrar_menu_4(){
      Serial.println(" maquina en estado conf menu 4");
       lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("7.reset/back");
  lcd.setCursor(0, 1);
  lcd.print("8.reset umb");
  bool temp_while = true;
 while (temp_while) {
   char key = keypad.getKey();
 if (key) {
   if(key=='#'){
    mostrar_menu_4();    //-------- menu derecha
    temp_while = false;
   }
   if(key=='*'){
    mostrar_menu_3();    //-------- menu izquierda
    temp_while = false;
   }
    press_menu(key);
    temp_while = false;
  }
  }
}

void press_menu(char key) {// hace la seleccion correspondiente al numero dijitado en estado de configuracion
  switch (key)
  {
    case '1': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 1 ");
        delay(1000);
        conf_temp_alta();
      };   break;
    case '2': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 2 ");
        delay(1000);
        conf_temp_baja();
      };   break;
    case '3': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 3 ");
        delay(1000);
        conf_temp_alarma();
      };   break;
    case '4': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 4 ");
        delay(1000);
        conf_umb_luz();
      };   break;
    case '5': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 5 ");
        delay(1000);
      };   break;
    case '6': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 6 ");
        delay(1000);
        currentInput = Input::forward;
        lcd.clear();
        lcd.setCursor(0, 0);       
      };   break;
    case '7': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 7 ");
        delay(1000);
        currentInput = Input::reset;
        lcd.clear();
        lcd.setCursor(0, 0); 
       };  
      break;
    case '8': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("opcion 8 ");
        delay(1000);
        reset_valores();
      };   break;
    case '9': {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("RESET ");
        delay(1000);
        currentInput= Input::reset;
      };   break;
    default: break;
  }
}

void reset_valores(){
   pos_memoria =0;
   EEPROM.update(pos_memoria, def_umb_temp_alta);
    pos_memoria =1;
   EEPROM.update(pos_memoria, def_umb_temp_baja);
    pos_memoria =2;
   EEPROM.update(pos_memoria, def_umb_temp_alarma);
    pos_memoria =3;
   EEPROM.update(pos_memoria, def_umb_luz);
    pos_memoria =5;
   EEPROM.update(pos_memoria, def_umb_sonido);
   lcd.setCursor(0, 1);
        lcd.print("reset defaul");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("                ");
        flag_start_configuracion = true;
  lcd.clear();
  lcd.setCursor(0, 0);
}

void conf_temp_alta() {// funcion que establese el umbral de temperatura alta
  pos_memoria = 0;
  byte temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_alta = temp_mem;
  }
  char key = keypad.getKey();
  bool temp_while = true;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("UMB TEMP HIGH");
  int temp_encoder = 0;
  int temp_encoder2 = 0;

  while (temp_while) {
    static int pos = 0;
    encoder.tick();
    int newPos = encoder.getPosition();
    if (pos != newPos) {
      Serial.println(newPos);
      temp_encoder2 = newPos;
      pos = newPos;
    }
    if (temp_encoder2 > temp_encoder) {
      umb_temp_alta = umb_temp_alta + 1;
      temp_encoder = temp_encoder2;
    }
    if (temp_encoder2 < temp_encoder) {
      umb_temp_alta = umb_temp_alta - 1;
      temp_encoder = temp_encoder2;
    }
    key = keypad.getKey();
    lcd.setCursor(0, 1);
    lcd.print("    ");
    lcd.setCursor(0, 1);
    lcd.print(umb_temp_alta);
    tiempo = millis();
  while (millis() < tiempo + 10UL) {// crea un retardo para la correcta visualizacion
  }
    if (key == '0') {
      if (umb_temp_alta > umb_temp_baja && umb_temp_alta < umb_temp_alarma && umb_temp_alta < max_temp && umb_temp_alta > min_temp) {
        temp_while = false;
      } else {
        lcd.setCursor(0, 1);
        lcd.print("temp incorrecta");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("                ");
      }
    }
  }
  EEPROM.update(pos_memoria, umb_temp_alta);
  flag_start_configuracion = true;
  encoderVal = 0;
  lcd.clear();
  lcd.setCursor(0, 0);
}
void conf_temp_baja() {// funcion que establese el umbral de temperatura baja
  pos_memoria = 1;
  byte temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_baja = temp_mem;
  }
  //encoderVal=5;
  char key = keypad.getKey();
  bool temp_while = true;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("UMB TEMP LOW");
  int temp_encoder = 0;
  int temp_encoder2 = 0;
  while (temp_while) {
    static int pos = 0;
    encoder.tick();
    int newPos = encoder.getPosition();
    if (pos != newPos) {
      Serial.println(newPos);
      temp_encoder2 = newPos;
      pos = newPos;
    }
    if (temp_encoder2 > temp_encoder) {
      umb_temp_baja = umb_temp_baja + 1;
      temp_encoder = temp_encoder2;
    }
    if (temp_encoder2 < temp_encoder) {
      umb_temp_baja = umb_temp_baja - 1;
      temp_encoder = temp_encoder2;
    }
    key = keypad.getKey();
    lcd.setCursor(0, 1);
    lcd.print("    ");
    lcd.setCursor(0, 1);
    lcd.print(umb_temp_baja);
      tiempo = millis();
  while (millis() < tiempo + 10UL) {// crea un retardo para la correcta visualizacion
  }
    if (key == '0') {
      if (umb_temp_baja < umb_temp_alta && umb_temp_baja < umb_temp_alarma && umb_temp_baja < max_temp && umb_temp_baja > min_temp) {
        temp_while = false;

      } else {
        lcd.setCursor(0, 1);
        lcd.print("temp incorrecta");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("                ");
      }
    }
  }
  EEPROM.update(pos_memoria, umb_temp_baja);
  flag_start_seguridad = true;
  encoderVal = 0;
  lcd.clear();
  lcd.setCursor(0, 0);
}
void conf_temp_alarma() {// funcion que establese el umbral de temperatura de alarma
  pos_memoria = 2;
  byte temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_alarma = temp_mem;
  }
  //encoderVal=5;
  char key = keypad.getKey();
  bool temp_while = true;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("UMB TEMP ALARM");

  int temp_encoder = 0;
  int temp_encoder2 = 0;

  while (temp_while) {
    static int pos = 0;
    encoder.tick();
    int newPos = encoder.getPosition();
    if (pos != newPos) {
      Serial.println(newPos);
      temp_encoder2 = newPos;
      pos = newPos;
    }
    if (temp_encoder2 > temp_encoder) {
      umb_temp_alarma = umb_temp_alarma + 1;
      temp_encoder = temp_encoder2;
    }
    if (temp_encoder2 < temp_encoder) {
      umb_temp_alarma = umb_temp_alarma - 1;
      temp_encoder = temp_encoder2;
    }
    key = keypad.getKey();
    lcd.setCursor(0, 1);
    lcd.print("    ");
    lcd.setCursor(0, 1);
    lcd.print(umb_temp_alarma);
      tiempo = millis();
  while (millis() < tiempo + 10UL) {// crea un retardo para la correcta visualizacion
  }
    if (key == '0') {
      if (umb_temp_alarma > umb_temp_alta && umb_temp_alarma > umb_temp_baja && umb_temp_alarma < max_temp && umb_temp_alarma > min_temp) {
        temp_while = false;
      } else {
        lcd.setCursor(0, 1);
        lcd.print("temp incorrecta");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("                ");
      }
    }
  }
  EEPROM.update(pos_memoria, umb_temp_alarma);
  flag_start_configuracion = true;
  encoderVal = 0;
  lcd.clear();
  lcd.setCursor(0, 0);
}
void conf_umb_luz() {// funcion que establese el umbral de luz
  pos_memoria = 3;
  int temp_mem;
  EEPROM.get(pos_memoria, temp_mem);
  if (temp_mem != NULL) {
    umb_luz = temp_mem;
  }
  //encoderVal=5;
  char key = keypad.getKey();
  bool temp_while = true;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("UMB LIGHT");
  int temp_encoder = 0;
  int temp_encoder2 = 0;
  while (temp_while) {
    static int pos = 0;
    encoder.tick();
    int newPos = encoder.getPosition();
    if (pos != newPos) {
      Serial.println(newPos);
      temp_encoder2 = newPos;
      pos = newPos;
    }
    if (temp_encoder2 > temp_encoder) {
      umb_luz = umb_luz + 1;
      temp_encoder = temp_encoder2;
    }
    if (temp_encoder2 < temp_encoder) {
      umb_luz = umb_luz - 1;
      temp_encoder = temp_encoder2;
    }
    key = keypad.getKey();
    lcd.setCursor(0, 1);
    lcd.print("    ");
    lcd.setCursor(0, 1);
    lcd.print(umb_luz);
      tiempo = millis();
  while (millis() < tiempo + 10UL) {// crea un retardo para la correcta visualizacion
  }
    if (key == '0') {
      if (umb_luz < 1023 && umb_luz > 0) {
        temp_while = false;
      } else {
        lcd.setCursor(0, 1);
        lcd.print("UMB incorrecto");
        delay(1000);
        lcd.setCursor(0, 1);
        lcd.print("                ");
      }
    }
  }
  EEPROM.put(pos_memoria, umb_luz);
  flag_start_configuracion = true;
  encoderVal = 0;
  lcd.clear();
  lcd.setCursor(0, 0);
}

#pragma endregion
#pragma region estado_monitoreo
void start_monitoreo(){
     leer_Eprom();
}

void funcion_monitoreo() {// funcion para el estado de bloqueo
  Serial.println(" maquina en estado monitoreo"); // se imprime en el debug el estado actual
  if (flag_start_monitoreo) { 
    start_monitoreo();
    flag_start_monitoreo = false;
  }
    // se actualizan las tareas asincronas
  asyncTaskTemp.Update();
  asyncTaskPhoto.Update();
  digitalWrite(swPin, HIGH);// se hace el senso del swich del encoder por 3 segundos para salir de run a configuracion
  if (digitalRead(swPin) == LOW)
  {
    digitalWrite(swPin, HIGH);
    tiempo = millis();
    while (millis() < tiempo + 3000UL) {
    }
    if (digitalRead(swPin) == LOW)
    {
    currentInput = Input::Backward;
    }
  }
   Serial.println(photo_value);
  // seleccion de funciones segun temperatura
  if (temperatura <= umb_temp_baja) {
    funcion_temp_baja();
  }
  if (temperatura > umb_temp_baja && temperatura <= umb_temp_alta ) {
    funcion_temp_normal();
  }
  if (temperatura > umb_temp_alta && temperatura < umb_temp_alarma ) {
    funcion_temp_alta();
  }
  if (temperatura >= umb_temp_alarma  ) {
   currentInput = Input::forward;
  }
  if (photo_value <  umb_luz) {// muestra un mensaje en pantalla si se supera el umbral de luz
    tiempo = millis();
    while (millis() < tiempo + 300UL) {
    }
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("hum sensor luz ");
    tiempo = millis();
    while (millis() < tiempo + 800UL) {
    }
  }
}

void funcion_temp_baja() { // funciones de maquina en estado Run con temperatura baja
  Serial.println(" maquina en estado monitoreo temp baja"); // se imprime en el debug el estado actual
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledAzul, HIGH);
  digitalWrite(ledVerde, LOW); // led en azul
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("temp:");
  lcd.print(temperatura); // se muestra en pantalla la temperatura dada por la convercion del valor del sensor
  lcd.setCursor(0, 1);
  lcd.print("ph:");
  lcd.print(photo_value);
  lcd.setCursor(12, 0);
  lcd.print("A");// se imprime en pantalla el indicador de estado
  tiempo = millis();
  while (millis() < tiempo + 500UL) {// crea un retardo para la correcta visualizacion
  }
}

void funcion_temp_normal() { // funciones de maquina en estado Run con temperatura normal
  Serial.println(" maquina en estado monitoreo temp normal"); // se imprime en el debug el estado actual
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledVerde, HIGH); // led en azul
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("temp:");
  lcd.print(temperatura); // se muestra en pantalla la temperatura dada por la convercion del valor del sensor
  lcd.setCursor(0, 1);
  lcd.print("photo:");
  lcd.print(photo_value);
  lcd.setCursor(12, 0);
  lcd.print("B"); // se imprime en pantalla el indicador de estado
  tiempo = millis();
  while (millis() < tiempo + 100UL) {// crea un retardo para la correcta visualizacion
  }
}

void funcion_temp_alta() { // funciones de maquina en estado Run con temperatura alta
  Serial.println(" maquina en estado monitoreo temp alta"); // se imprime en el debug el estado actual
  digitalWrite(ledRojo, HIGH);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledVerde, LOW); // led en azul
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("temp:");
  lcd.print(temperatura); // se muestra en pantalla la temperatura dada por la convercion del valor del sensor
  lcd.setCursor(0, 1);
  lcd.print("photo:");
  lcd.print(photo_value);
  lcd.setCursor(12, 0);
  tiempo = millis();
  while (millis() < tiempo + 100UL) {// crea un retardo para la correcta visualizacion
  }
}

void leer_Eprom() {// lee los valores de los umbrales almacenados en la memoria
  // se establese los indices de memoria de la siguente manera
  // 0 umb_temp_alta
  // 1 umb_temp_baja
  // 2 umb_temp_alarma
  // 3,4 umb_luz    // se asgnan 2 bytes por ser enteros
  // 5,6 umb_sonido
  pos_memoria = 0;
  int temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_alta = temp_mem;
  }
  pos_memoria = 1;
  temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_baja = temp_mem;
  }
  pos_memoria = 2;
  temp_mem = EEPROM.read(pos_memoria);
  if (temp_mem != NULL) {
    umb_temp_alarma = temp_mem;
  }
  pos_memoria = 3;
  EEPROM.get(pos_memoria, temp_mem);
  if (temp_mem != NULL) {
    umb_luz = temp_mem;
  }
  pos_memoria = 5;
  EEPROM.get(pos_memoria, temp_mem);
  if (temp_mem != NULL) {
    umb_sonido = temp_mem;
  }
}

#pragma endregion

#pragma region estado_de_alarma

void funcion_alarma() { // funciones de maquina en estado run con temperatura de alarma
  Serial.println(" maquina en estado de alarma"); // se imprime en el debug el estado actual
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledAzul, HIGH);
  digitalWrite(ledVerde, LOW); // led en azul
  delay(200);
  digitalWrite(ledRojo, HIGH);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledVerde, LOW); // led rojo

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("temp:");
  lcd.print(temperatura); // se muestra en pantalla la temperatura dada por la convercion del valor del sensor
  lcd.setCursor(12, 0);
  lcd.print("D"); // se imprime en pantalla el indicador de estado
  lcd.setCursor(0, 1);
  lcd.print("ALARMA");

  sonar_buzz(); // se hace sonar el buzzer en señal de alarma
  secuencia_led(); // se muestra una secuencia de led en rojo y azul en señal de alarma

  tiempo = millis(); // se da tiempo de espera de alarma
  while (millis() < tiempo + 2000UL) {// crea un retardo para la duracion del estado ***********

  currentInput = Input::forward;

}
}

void sonar_buzz() { // funcion encargada de hacer sonar el buzzer
  for (int i = 0; i < 3; i++) {      // bucle repite 4 veces, 1 por cada nota
    int duracion = 1000 / duraciones[i];    // duracion de la nota en milisegundos
    tone(pin_buzz, melodia[i], duracion);  // ejecuta el tono con la duracion
    int pausa = duracion * 1.30;      // calcula pausa
    delay(pausa);         // demora con valor de pausa
    noTone(pin_buzz);        // detiene reproduccion de tono
  }
}
#pragma endregion
//FIN DEL PROGRAMA